{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}

    <h1>Report</h1>
    <p>Här kommer Redovisning till alla kursens kmomer.</p>
    <ul>
        <li><a href="#kmom01">Kmom01</a></li>
        <li><a href="#kmom02">Kmom02</a></li>
        <li><a href="#kmom03">Kmom03</a></li>
        <li><a href="#kmom04">Kmom04</a></li>
        <li><a href="#kmom05">Kmom05</a></li>
        <li><a href="#kmom06">Kmom06</a></li>
        <li><a href="#kmom10">Kmom10</a></li>
    </ul>

    <h2 id="kmom01">Kmom01</h2>
    <p><em>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</em></p>
    <p>- Jag hade et ganska bra erfarenhet med objektorientering, så att jobbade lite inom Javascript kursen och sedan jobbade mer inom oopython kursen.</p>
    <p><em>Berätta kort om PHPs modell för klasser och objekt. Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?</em></p>
    <p>- Jag ser att man bör se, läsa och göra själv classer, så att med tiden man blir bättre och bättre.</p>
    <p><em>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</em></p>
    <p>- I PHP-kontrollern hanteras routes kopplade till TWIG-templates, och inkluderar metoder och instanser av klasser. Denna struktur underlättar funktionaliteten i kodbasen genom att hantera inkommande förfrågningar, bearbeta dem med lämpliga metoder och klasser, och slutligen rendera dynamiskt innehåll med hjälp av TWIG-templates.</p>
    <p><em>Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? Är det några särskilda områden som du känner att du vill veta mer om? Lyft fram några delar av artikeln som du känner mer värdefulla.</em></p>
    <p>- Dependency Inversion Principle är ett mycket spännande koncept som jag har upptäckt och lärt mig mer och mer om, särskilt inom området för Dependency Injection. Det är verkligen en grundläggande princip som hjälper till att skapa löst kopplade och modulära system.</p>
    <p><em>Vilken är din TIL för detta kmom?</em></p>
    <p>- Min TIL till detta kmomen är att man ska läsa oerhört mychet och lär sig mycket specielt på början av kursen. Men sedan man ska förstå allt och man bli bättre och nöjd</p>

    <h2 id="kmom02">Kmom02</h2>
    <p><em>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</em></p>
    <p>- Arv är en grundläggande princip inom objektorienterad programmering där en klass kan ärva egenskaper och metoder från en annan klass.</p>
    <p>- Komposition är en designprincip där objekt skapas genom att kombinera andra objekt. Istället för att ärva från en annan klass kan en klass innehålla instanser av andra klasser.</p>
    <p>- Ett interface är en samling av metoder som en klass måste implementera. Det tillåter dig att definiera ett kontrakt för hur olika klasser ska bete sig utan att specificera detaljerna för implementeringen.</p>
    <p>- Ett trait är en sätt att återanvända metoder i flera klasser. Det tillåter dig att inkludera metoder i en klass utan att använda arv.</p>
    <p><em>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</em></p>
    <p>- Jag fick svårigheter under upgiften men provade jag några gånger och ändrade väldig många gånger. Den svåraste var när jag försökte planera classerna så att det var lite svårt i början men sedan kände jag mig blev bättre och började jag skapa methoder och anropa dem och koden var väldigt organiserad och det därför blev jag oerhört nöjd och lärt mig väldigt mycket och classerna, Symfony, och Dependendency injection, och inversion principle. Men man kan väl göra förbättringar på classerna och kan de bli mer organiserad.</p>
    <p><em>Vilka är dina reflektioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</em></p>
    <p>- Jag känner att Symfony är väldigt viktig Framework så att det är Ful-stack framework, och det är väldigt bra när man hanterar complecerad projekter.</p>
    <p><em>Vilken är din TIL för detta kmom?</em></p>
    <p>- Min TIL till detta kmom är att surfa och lära allt som möjligt även om tog lång tid. Exakt som jag har djort när det kom till Dependency injection och inversion. </p>

    <h2 id="kmom03">Kmom03</h2>
    <p><em>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</em></p>
    <p> Det var sännande att modellera spelet med flödesdiagram och psuedokod så att lärde jag mig hur man gör dem, jag tycker att fe är väldigt viktiga och underlättar kods förståelse samt tankearbete för att strukturera koden.</p>
    <p><em>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?</em></p>
    <p>Jag skapade classer med methoder som hjälpte mig med att display, calculate, valuate ...etc cards, cards Hand, and game. Sedan fotsatt jag inom Controllerna tog emot datan och set, get av session och skicka till twig templates. Man kan göra lite förbättningar på classerna på Backend för att minska mer data av twig templates på front-end.   </p>
    <p><em>Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?</em></p>
    <p>Jag känner mig väldigt bättre med Object-Orianted, Sessions, Routes and frameworks.</p>
    <p><em>Vilken är din TIL för detta kmom?</em></p>
    <p>Min TIL for detta kmom är att det är Crucial att man förstå koden och leka så mycket som möjligt för att bli bättre.</p>

    <h2 id="kmom04">Kmom04</h2>
    <p><em>Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.</em></p>
    <p>Ja jag skrev lite mer metoder specifikt för att testa funktionalitetet ava andra methoder, det var roligt och lärorikt så att man testa alla detaljer och funktionaliteten. </p>
    <p><em>Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?</em></p>
    <p>Ja jag lyckades uppnå nästan 95% Lines, 95% Functions and Methods, och 75% Classes and Traits.</p>
    <p><em>Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?</em></p>
    <p>Mest av koden är testbar, men jag det finns Game class som man kan förbättra lite på det, samt finns det andra metoder som kunde jag testa hela funktionalitetet men tycker jag att jag kan förbättra och föränkla values de retunerar så att t.ex har jag många funktioner som retunerar array och man kan föränkla structuren på de. Därtill använde jag dem inom varandra och därför fick jag array inom array struktur och det kan man förbättra.</p>
    <p><em>Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.</em></p>
    <p>Jag skrev mer metoder för att hjälpa med testarna, och ändrade lite vid behov. Då tänkte jag att underlätta implementation, men nästa gången ska jag göra väldigt specifika, tydliga funktionalitet classer och metoder. </p>
    <p><em>Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.</em></p>
    <p>Jag självklart gör det koden renare och Straightforward, samt görde mig läsa och koda mer och mer så man blir väldigt bättre med att koda och träna hjärnan.</p>
    <p><em>Vilken är din TIL för detta kmom?</em></p>
    <p> Min TIL är att fokusera på att skriva enkla specifika classer och metoder så mycket som möjligt så är det bättre när man skriver flera specifika methoder och classer.</p>

    <h2 id="kmom05">Kmom05</h2>
    <p><b>Krav:</b></p>
    <ol>
        <li><p><em>Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen?</em></p></li>
        <li><p><em>Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet?</em></p></p></li>
        <li><p><em>Gick det bra att jobba med ORM i CRUD eller vad anser du om det, jämför gärna med andra sätt att jobba med databaser?</em></p></li>
        <li><p><em>Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?</em></p></li>
        <li><p><em>Vilken är din TIL för detta kmom?</em></p></li>
    </ol>

    <p><b>Svar:</b></p>
    <ol>
        <li>
            <p>Det det bra att jobba igenom övningen med Symfony och Doctrine. Därtill fick jag svårigheter i början men sedan förstood jag allt och blev smidigt.</p>
            <p>Jag tänkte att kolla mer och försöka förstå lite mer om sqlite och jämförde detta med mysql som jobbade jag redan inom databas kursen. Därtill fick jag att sqlite skappa fil.db inom projekts miljö som en databas medan mysql var DBMS som sprade databasen på server (Mariadb).</p>
            <p>Och sedan jobbade jag med övningen och skapade database samt med entities och jobbade med ORM vilket var spännande.</p>
        </li>
        <li>
            <p>Jag började med att planera så att tänkte att jag ska behöva skapa book entity med flera properties för att implementera library och visa upp böcker på sidan, samt göra CRUD.</p>
            <p>Jag tänkte att styla buttons och visa upp böcker inom table för att förbättra UI och görde sidan lätt att använda och nå till alla saker som man behöver göra och så man får väldigt bra UX .</p>
        </li>
        <li>
            <p>Det var väldigt spännande att jobba med ORM så att det var min första gång jobbar med detta eller liknande. Därtill var det smedigt och användbar att göra CRUD och forms och så ändrar man databsen.</p>
            <p>ORM-system erbjuder en högnivåabstraktion för att arbeta med databaser och erbjuder enkelhet, produktivitet och databasagnosticism till priset av prestandaöverhäng och begränsad kontroll. Att arbeta direkt med en databas utan ORM ger utvecklare full kontroll över databasinteraktioner och potentiellt bättre prestanda, men kräver mer erfarenhet och kan vara mer komplicerat och beroende av databasen.</p> 
            <p>Valet mellan att använda en ORM och att arbeta utan en beror på faktorer som projektbehov, utvecklarexpertis och prestandaöverväganden. </p>
        </li>
        <li>
            <p>När vi jobbade inom databas kurs så brukade sätta kunnektions Config och skapa en konnektion till databasen och skicka SQL query inom JavaScript kod.</p>
            <p>Medan med ORM är det lättare så att behöver vi inte implementera SQl query och skapa anslutning till databasen, utan att vi kan göra SQL query direkt till SQLite med Terminal och så för vi automatiskt Classer och Reposotories (som handlar service entity (SELECT  queries)).</p>
            <p>Så min uppfattning om ORM är övervägande positiv. Det erbjuder en praktisk abstraktion som gör det enklare att arbeta med databaser genom att möjliggöra användning av objektorienterade modeller istället för att skriva SQL-frågor direkt. Detta kan leda till ökad produktivitet och minskad kodupprepning, särskilt när man hanterar en mängd olika databastabeller och relationer så kan man byta databassystem utan att behöva göra stora ändringar i kodbasen.</p>
            <p>Med det sagt finns det situationer där att arbeta direkt med databasen utan användning av ORM kan vara fördelaktigt. Till exempel när du behöver optimera prestanda eller skriva komplexa SQL-frågor som inte stöds av ORM:en. I vissa fall kan att skriva rå SQL ge bättre prestanda och ökad flexibilitet.</p>
        </li>
        <li><p>Min TIL till detta kmom att man ska ge tid till nya info och concepts som lär sig, söka mycket för att lära så mycket som möjligt. Och så ska man bli väldigt bättre med tid. </p></li>
    </ol>

    <h2 id="kmom06">Kmom06</h2>
        <p><b>Krav:</b></p>
    <ol>
        <li><p><em>Hur uppfattade du verktyget phpmetrics och fann du några särskilda bitar mer värdefulla än andra? Var det några särskilda metrics eller bilder du uppskattade?</em></p></li>
        <li><p><em>Berätta hur det gick att integrera med Scrutinizer och vilken är din första känsla av verktyget och dess badges? Vilken kodtäckning och kodkvalitet fick du efter första bygget?</em></p></p></li>
        <li><p><em>Hur är din egen syn på kodkvalitet, berätta lite om den? Tror du man kan man påvisa kodkvalitet i någon viss mån med badges eller vad tror du?</em></p></li>
        <li><p><em>Vilken är din TIL för detta kmom?</em></p></li>
    </ol>

    <p><b>Svar:</b></p>
    <ol>
        <li>
            <p>Jag ser phpmetrics som ett oerhört värdefullt verktyg eftersom det presenterar flera mätningar och aspekter som gör det möjligt att analysera olika delar av koden för att uppnå ren och underhållbar kod. Bland de många mätningarna tycker jag att följande är särskilt värdefulla:</p>
            <p>Maintainability: Denna mätning hjälper till att identifiera hur lätt det är att underhålla och vidareutveckla koden, vilket är avgörande för långsiktig hållbarhet.</p>
            <p>Complexity: Genom att analysera komplexiteten i koden kan man identifiera potentiella problemområden som kan leda till buggar och svårigheter vid vidareutveckling.</p>
            <p>Coupling: Detta mått är viktigt för att förstå graden av beroenden mellan olika delar av koden. Låg koppling bidrar till att göra koden mer modulär och lättare att underhålla.</p>
            <p>Utöver dessa mätningar uppskattade jag också de grafiska representationerna som phpmetrics erbjuder. De visuella bilderna och diagrammen ger en tydlig översikt över kodbasens hälsa och struktur, vilket gör det lättare att snabbt identifiera och åtgärda problemområden.</p>
        </li>
        <li>
            <p>Till en början tyckte jag att Scrutinizer verkade lite konstigt och komplicerat, men snart insåg jag att det är ett oerhört professionellt verktyg för statisk analys och Continuous Integration (CI). Scrutinizer testar och mäter nästan alla aspekter av koden, vilket hjälper till på ett mycket bra sätt att fixa och förbättra koden.</p>
            <p>Vid första bygget gick det inte så bra eftersom jag gjorde något felaktigt. Men efter att hade försökt igen, fick jag bygget att passera. Resultaten blev 15% kodtäckning och en kodkvalitetsbetyg på 6.68.</p>
            <p>Min första känsla av Scrutinizer och dess badges är att de ger en tydlig och motiverande översikt av kodens kvalitet och täckning. Verktyget identifierar specifika områden som behöver förbättras och erbjuder insikter som är mycket användbara för att säkerställa att koden är robust och underhållbar. Med hjälp av Scrutinizer kan man kontinuerligt övervaka och förbättra kodbasen, vilket leder till högre kvalitet och mer reliable software.</p>
        </li>
        <li>
            <p>Jag tycker att kodkvalitet är oerhört viktig. Genom att följa etablerade standarder och skriva välstrukturerad och läsbar kod kan programmerare säkerställa att koden är lätt att förstå och underhålla. God kodkvalitet bidrar till att program fungerar på ett tillförlitligt sätt, minskar antalet fel och buggar, och förbättrar utvecklingsprocesserna över tid. Det skapar också en gemensam grund för samarbete, där alla i teamet kan förstå och arbeta med koden effektivt.</p>
            <p>Självklart kan man påvisa kodkvalitet med hjälp av badges. Dessa badges fungerar som synliga indikatorer som länkar till resultat från Scrutinizer verktyg. Dessutom, ger de en snabb överblick över kodens kvalitet, och kan vara mycket motiverande för utvecklingsteam att sträva efter högre standarder. Badges visar också för andra utvecklare och intressenter att projektet upprätthåller god kodkvalitet och kontinuerligt arbetar för att förbättra den.</p>
        </li>
        <li>
            <p>Min TIL för detta kmom är att fokusera på detaljerna och att verkligen ta till sig den värdefulla informationen och de olika aspekterna kring att köra och analysera kod. Det är viktigt att inte bara förstå hur verktygen fungerar, utan också varför de är viktiga och hur de kan användas för att förbättra kodkvaliteten. Genom att göra detta kommer man lär sig mycket om hur man skriver mer robust och underhållbar kod, samt hur man identifierar och åtgärdar potentiella problem tidigt i utvecklingsprocessen.</p>
        </li>
    </ol>

    <h2 id="kmom10">Kmom10</h2>

    <h3>Classes(Back-end)</h3>
    <p>För detta projektet så använde jag redan skapade klasser plus nya klasser som jag sog att de kommer att bli användbara och värdefulla till mitt projekt. Därtill hade jag skapat redan igenom kmom03 och kmom06 refactorerad och lagt till klasser så klasserna som hade jag förut var:</p>
    <ul>
        <li>Card</li>
        <li>CardGraphic</li>
        <li>CardHand</li>
        <li>CardDeck</li>
        <li>CardRepresentation</li>
        <li>Game</li>
    </ul>
    <p>De klasserna använde jag när implementerad Kortspel 21, men nu tänkte jag ändra lite på Game klass så att göra Black Jack Rules istället. Dessutom skapade jag Player klass för att behandla värje spelare.</p>
    <p>Så enligt korter så skapade jag  fem klasser för att behandla alla möjliga manipulationer om korter. Så hade jag gjort Inheritance mellan Card och CardGraphic så att Card är Super class och CardGraphic som Subclass.</p>
    <p>jag valde att använda Inheritance för att det förbättrar Code Reusability, Extensibility, Organization så ger det bättre Maintainability.</p>
    <p>Så Card klass innehåller grundläggande metoder som behandlar huvudsakligen Get, Set values.</p>
    <p>CardGraphic extenderar Card klass och beroende på  CardRepresentation klass och på CardDeck klass. Därtill, CardGraphic's Construct länkar CardRepresentation klass med CardDeck klass, samt finns det andra metoder som extenderar The parent class's methods men anslutade till CardRepresentation t.ex getAllCardsAsString() så hämtar det alla unicode represented cards utifrån CardRepresentation. </p>
    <p>Dessutom, innehåller det andra metoder som rollar korterna, randomCard() som draw a random card, cardsArrayCount() som räknar korter som finns inom CardDeck klass, chosenCard() och getRepresentation() som hämtar till CardRepresentation klass.</p>
    <p>Sedan skapade jag CardHand för att behålla korter och Manipulate funktionaliteter som relevanta med Handen. Så huvudsakligen add() som tar emot CardGraphic class's object som Dependency Injection, och tänkte jag använda detta för att var det nytt för mig så kände jag att det är oerhört spännande att lära mig detta och använda.</p>
    <p>Därtill, Dependency Injection är väldigt bra för att ger det mer Decoupling, Flexibility, och Maintainability så koden blir renare.</p>
    <p>Förutom detta, så CardHand klass Essential metoder som behandlar att get values, string  och att räkna korter som finns inom handen getNumberCards().</p>
    <p>Inom CardDeck klassen så använde jag Dependency Injection en gång till inom Construct  så är det ett bättre val instället att skapa många objekter.</p>
    <p>Därförutom, innehåller CardDeck klass shuffle(),chosenCards(),cardsArrayCount() men enligt metoderna som använde i Examinationen så är de randomCard() som draw a random card och unset it from the CardRepresentation array.</p>
    <p>CardRepresentation Klass huvudsakligen är ansvarig av korter representation så att innehåller det representation array samt med Setter och Getters metoder.</P>
    <p>Enligt Game klass så är det ansvarig att behandla spelets funktionalitet. Därutöver, finns hand array som ska behålla korter som drawCard() retunerar, och finns det Setter, Getter och calculateHandValue() vilket returnerar totala values av handens korter. Så denna metoder implementerar cards' values. </p>
    <p>Äntligen skapade jag Player klass som är ansvarig av skapa player objekt så tar det emot player's name och bet inom Construct, samt innehåller detta getters till name och bet och setter till bet, under tiden att retunerar toArray() name and bet som associative array.</p>

    <h3>Controllers(Back-end)</h3>
    <p>För detta Examinationen så har det Fyra Controller två till Json och två för atta koppla Modules med Views:</p>
    <ul>
        <li>ProjectControllerTwig</li>
        <li>ProjectController</li>
        <li>ProjectControllerJsonTwig</li>
        <li>ProjectControllerJson</li>
    </ul>
    <p>För de som avslutar med Twig så är de bara för att koppla t.ex en View med en annan View eller redirect till annan Route med data som annan Route behöver.</p>
    <p>ProjectControllerJson behandlar krav fyra som innehåller fem JSON Routes som testar många functionalitet av klasserna.</p>
    <p>ProjectController vilket är den huvudliga Controller och innehåller alla huvudliga Routes som ansluta klasser med templates(eller M med V) (eller Back-end med Front-end) eller (Server-side med Client-side) och manage the project's logic.</p>

    <h3>Views(Templates)(Front-end)</h3>
    <p>För Examinationen så har jag lagt Examinations templates inom project mapp och så det innehåller:</p>
    <ul>
        <li>about.html.twig</li>
        <p>Innehåller beskrivning om Black Jack spel.</p>
        <li>api.html.twig</li>
        <p>Innehåller krav 4 så fem Json Routes mellan Get och POST.</p>
        <li>black.jack.html.twig</li>
        <p>Den huvudliga Template som vissar upp hela spelet.</p>
        <li>macros.html.twig</li>
        <p>Innehåller macros så att minska upprepningar och förbättra Maintainability och Reusability.</p>
        <li>players.names.html.twig</li>
        <p>Behandlar Players names and bets.Med hjälp av Javascript så User kan väljä så mycket spelare som man vill.</p>
        <li>projectmainpage.html.twig</li>
        <p>Behandlar Number of Players form.</p>
    </ul>
    <p>Samt har jag skapat en Base fil baseproject.html.twig som innehåller the base layout.</p>

    <h2>Implementation</h2>
    <p>Jag började med att skapa Base template baseproject.html.twig och skapade en olika Styling så var det väldigt olikt, sedan skapade Controller och template projectmainpage.html.twig inom project folder så user kan välja hur många spelare ska spela, jag begränsade detta mellan 1 och 6 för att jag sog att det är vettigt annars koden fungerar med hur många som helst spelare. Sedan gjorde det att få nummret av form och skicka till via routern med players number till players.names.html.twig template.</p>
    <p>Då loopade genom players number och skapade forms för att ta emote players' names och bets och när användaren Submits the form så data skickas vidare till Controllerna och där kan man hämta datan av Request.</p>
    <p>Därtill, använde jag JavaScript för att update playerData with player name and bet based on input fields, Prevents default, logs playerData, serializes it, sets it in a hidden input och så kan man hämta datan inom Controllers.</p>
    <p>Inom Controller så skapade jag start/game Route som ansluttar Game class som draw cards, ligger dem inom array sedan get the array innehåller drawn Cards och räkna deras values, med Player class som skapar en Player object som har name och bet och så skapar det Player och sen skapar Dealer object och draw random card till dealer och sedan sparar alla datan inom arrayer $gameState[] och $dealer[], seadn ligger datan i Sessionen och skicka den till och rendera project/black.jack.html.twig. </p>
    <p>Därtill, skapade /hit/{playerName} Route för att behandla olika saker som draw en till random card, busted , done, lite Bet när player busted och beräknar handPoints.   </p>
    <p>Sedan skapade /stay/{playerName} Route som behandlar Stay case, så implementerar om Stayed so det är done flag true (player's turn) samtidigt. </p>
    <p>Dessutom, skapade areAllPlayersDone() metod för att förenkla koden och implementera när alla spelare klara (all turns done).</p>
    <p>Äntligen, skapade dealerTurn() som behandlar när alla spelare done så dealer fortsätt draw cards as long as its hand < 17 och behandlar bet.</p>
    <p>Enligt fjärde krav så skapade jag en JSON Controller och tänkte att testa funktionalitetet av projektet så att skapade jag Game state vilket kan bli användbar, så vissar det upp Player's och dealer's data.</p>
    <p>Sedan tänkte jag skapa api/hit Route så testar man hit route(När spelaren trycker på Hit button (Draw random card))</p>
    <p>Dessutom, skapade jag /api/dealer/turn Route så testar det dealer's turn, så att så länge så dealer är under 17 så fortsätter draw random cards. Samt visar upp dealerHand med dealerHandPoints. </p>
    <h4>POST Routes:</h4>
    <p>/api/start/game som testar hela spelet och börja en nytt spel, och visar upp medelande som säger att spelet lyckades att påbörja med alla players' data. </p>
    <p>/api/create/player som testar funktionalitet att skapa en ny spelare och visa upp dess namn samt med bet.</p>

    <h2>Projektet gick att genomföra</h2>
    <p>Projektet allmänt var inte komplicerad, men jag ville att göra det professional så använde jag JavaScript och andra onödiga saker t.ex inom Styling och med mera.. Så hade jag möjlighet att göra det lättare men jag ville ta min tid och göra en professoinellt project.</p>
    <p>Enligt project krav, så är det inte komplicerad men tar detta lång tid som vanligt, så att det innehåller mycket data på Back-end speciellt med classer (Moduler) och behövde jag implementera inom Controllers mycket samt inom templates också trotts att ville jag att undvika detta så mycket som möjligt.</p>
    <p>Så svårighet var inte mycket men ibland man ser svårt saker t.ex när jag implementerade Javascript block så var det inte så lät.</p>
    <p>Samt hade jag flera problem när implementerade flags för att implementera done, stayed så påverkade de andra funktionaliter och det därför skapade en metod som handlar dem äntligen.</p>
    <p>Enligt Classer (Models) så var det ganska lät eftersom hade jag några classer redan så behövde jag fortsätta instället att Start from Scratch.</p>
    <p>Generellt, var det väldigt spännande project så att man gör mer pro saker och förstår filerna samt med nya concepts t.ex MVC och Full-stack Framework.</p>

    <h2>Mina tankar om kursen</h2>
    <p>Jag tänker att denna kursen är en av de viktigaste kurser som jag tog redan eftersom innehåller det oerhört vördefulla Concepts som MVC och Full-stack Framework så innehåller väldigt olika Config filer som XML, Composer och package Json, Yaml...</p>
    <p>Full-stack framework provide a comprehensive set of tools, libraries, and components that cover both the front-end (client-side) and back-end (server-side) aspects within a unified ecosystem. Det därför är det viktigt så att it's used commonly.</p>
    <p>Kursen var lärörikt så att innehåll olika aspekter och handledningen var ganska bra men jag hade svårigheter med att förstå kraver ibland så fanns det några otydliga saker som stor inte i kraver men tog jag komplettering på dem. </p>
    <p>Krav kan förbättras så att bli tydligare och matcha bedömningen.</p>
    <p>Annars, allt är bra och är jag oerhört nöjd med kursen samt med nya saker jag lärt mig genom. </p>
    <p>Självklart, ska jag rekommendera kursen till vänner så att kursen är värdefullt, och jag ger det 10 av 10 som betyg. </p>
    {% endblock %}

{# To push to github:
git init => git add . => git tag -m"message" => git commit -m "message" => git push origin --tags => git push origin main (main is the branch name) #}
